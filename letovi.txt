import csv
import re
import datetime
"""
Funkcija koja omogucuje korisniku da pregleda informacije o letovima
Ova funkcija sluzi samo za prikaz
"""
def pregled_nerealizovanih_letova(svi_letovi: dict):
    for let in svi_letovi:
        print("Let: " + svi_letovi["broj_leta"])
        print("\nSifra polazisnog aerodroma: " + svi_letovi["sifra_polazisnog_aerodroma"])
        print("\nSifra odredisnog aerodorma: " + svi_letovi["sifra_odredisnog_aerodorma"])
        print("\nVreme poletanja: " + svi_letovi["vreme_poletanja"])
        print("\nVreme sletanja: " + svi_letovi["vreme_sletanja"])
        print("\nSletanje sutra: " + svi_letovi["sletanje_sutra"])
        print("\nPrevoznik: " + svi_letovi["prevoznik"])
        print("\nDani: " + svi_letovi["dani"])
        print("\nModel: " + svi_letovi["model"])
        print("\nCena: " + svi_letovi["cena"])
"""
Funkcija koja omogucava pretragu leta po yadatim kriterijumima. Korisnik moze da zada jedan ili vise kriterijuma.
Povratna vrednost je lista konkretnih letova.
"""
def pretraga_letova(svi_letovi: dict, konkretni_letovi: dict, polaziste: str = "", odrediste: str = "", datum_polaska: str = "",datum_dolaska: str = "",
                    vreme_poletanja: str = "", vreme_sletanja: str = "", prevoznik: str = "")->list:
    povratna_lista = []
    for k in konkretni_letovi:
        svaki_let = svi_letovi[konkretni_letovi[k]["broj_leta"]]
        if polaziste == "" or svaki_let["sifra_polazisnog_aerodroma"] != polaziste:
            pass
        if odrediste == "" or svaki_let["sifra_odredisnog_aerodorma"] != odrediste:
            pass
        if datum_polaska == "" or konkretni_letovi[k]["datum_i_vreme_polaska"] != datum_polaska:
            pass
        if datum_dolaska == "" or konkretni_letovi[k]["datum_i_vreme_dolaska"] != datum_dolaska:
            pass
        if vreme_poletanja == "" or svaki_let["vreme_poletanja"] != vreme_poletanja:
            pass
        if vreme_sletanja == "" or svaki_let["vreme_sletanja"] != vreme_sletanja:
            pass
        if prevoznik == "" or svaki_let["prevoznik"] != prevoznik:
            pass
        povratna_lista.append(konkretni_letovi[k])
    return povratna_lista

def trazenje_10_najjeftinijih_letova(svi_letovi: dict, polaziste: str = "", odrediste: str =""):

    izabrani_letovi = {}
    for let in svi_letovi:
        if polaziste == "" or svi_letovi[let]["sifra_polazisnog_aerodroma"] != polaziste:
            pass
        if odrediste == "" or svi_letovi[let]["sifra_odredisnog_aerodorma"] != odrediste:
            pass
        izabrani_letovi[let] = svi_letovi[let]
    sort_d = sorted(izabrani_letovi.items(), key="cena")
    return sort_d

"""
Funkcija koja kreira novi rečnik koji predstavlja let sa prosleđenim vrednostima. Kao rezultat vraća kolekciju
svih letova proširenu novim letom. 
Ova funkcija proverava i validnost podataka o letu. Paziti da kada se kreira let, da se kreiraju i njegovi konkretni letovi.

CHECKPOINT2: Baca grešku sa porukom ako podaci nisu validni.
"""
def kreiranje_letova(svi_letovi: dict, broj_leta: str, sifra_polazisnog_aerodroma: str, sifra_odredisnog_aerodorma: str,
                     vreme_poletanja: str, vreme_sletanja: str, sletanje_sutra: bool, prevoznik: str,
                     dani: list, model: dict, cena: float, datum_pocetka_operativnosti: datetime = None,
                    datum_kraja_operativnosti: datetime = None):
    if broj_leta not in svi_letovi:
        if len(broj_leta) != 4 or (broj_leta[0] + broj_leta[1]).isalpha() == False or (broj_leta[2] + broj_leta[3]).isnumeric() == False:
            raise Exception("Broj leta nije ispravno unet!")
    else:
        raise Exception("Uneti broj leta vec postoji!")
    if not model:
        raise Exception("Pogresno unet model!")
    if not dani:
        raise Exception("Pogresno uneti dani!")
    if isinstance(vreme_poletanja, str) and vreme_poletanja.count(":") == 1:
        pom = vreme_poletanja.split(":")
        if pom[0].isnumeric() and pom[1].isnumeric():
            pass
        else:
            raise Exception("Pogresno uneto vreme poletanja")
    else:
        raise Exception("Pogresno uneto vreme poletanja")
    if isinstance(vreme_sletanja, str) and vreme_sletanja.count(":") == 1:
        pom = vreme_sletanja.split(":")
        if pom[0].isnumeric() and pom[1].isnumeric():
            pass
        else:
            raise Exception("Pogresno uneto vreme sletanja")
    else:
        raise Exception("Pogresno uneto vreme sletanja")
    if isinstance(cena, float) == False or cena < 0:
        raise Exception("Pogresan unos cene!")
    let = {
        "broj_leta": broj_leta,
        "sifra_polazisnog_aerodroma": sifra_polazisnog_aerodroma,
        "sifra_odredisnog_aerodorma": sifra_odredisnog_aerodorma,
        "vreme_poletanja": vreme_poletanja,
        "vreme_sletanja": vreme_sletanja,
        "sletanje_sutra": sletanje_sutra,
        "prevoznik": prevoznik,
        "dani": dani,
        "model": model,
        "cena": cena,
        "datum_pocetka_operativnosti": datum_pocetka_operativnosti,
        "datum_kraja_operativnosti": datum_kraja_operativnosti
    }
    svi_letovi[broj_leta] = let
    return svi_letovi
"""
Funkcija koja menja let sa prosleđenim vrednostima. Kao rezultat vraća kolekciju
svih letova sa promenjenim letom. 
Ova funkcija proverava i validnost podataka o letu.

CHECKPOINT2: Baca grešku sa porukom ako podaci nisu validni.
"""
def izmena_letova(svi_letovi : dict, broj_leta: str, sifra_polazisnog_aerodroma: str, sifra_odredisnog_aerodorma: str,
                     vreme_poletanja: str, vreme_sletanja: str, sletanje_sutra: bool, prevoznik: str,
                     dani: list, model: dict, cena: float, datum_pocetka_operativnosti: datetime, datum_kraja_operativnosti: datetime)-> dict:
    if broj_leta not in svi_letovi:
        raise Exception("Uneti broj leta ne postoji!")
    else:
        if len(broj_leta) != 4 or (broj_leta[0] + broj_leta[1]).isalpha() == False or (
                broj_leta[2] + broj_leta[3]).isnumeric() == False:
            raise Exception("Broj leta nije ispravno unet!")
    if not model:
        raise Exception("Pogresno unet model!")
    if not dani:
        raise Exception("Pogresno uneti dani!")
    if not isinstance(sifra_polazisnog_aerodroma, str) or len(sifra_polazisnog_aerodroma) != 3:
        raise Exception("Pogresno polaziste!")
    if not isinstance(sifra_odredisnog_aerodorma, str) or len(sifra_odredisnog_aerodorma) != 3:
        raise Exception("Pogresno odrediste!")
    if not isinstance(prevoznik, str):
        raise Exception("Pogresan prevoznik!")
    if not isinstance(sletanje_sutra, bool):
        raise Exception("Pogresno unet parametar sletanje sutra!")
    if isinstance(vreme_poletanja, str) and vreme_poletanja.count(":") == 1:
        pom = vreme_poletanja.split(":")
        if pom[0].isnumeric() and pom[1].isnumeric():
            pass
        else:
            raise Exception("Pogresno uneto vreme poletanja")
    else:
        raise Exception("Pogresno uneto vreme poletanja")
    if isinstance(vreme_sletanja, str) and vreme_sletanja.count(":") == 1:
        pom = vreme_sletanja.split(":")
        if pom[0].isnumeric() and pom[1].isnumeric():
            pass
        else:
            raise Exception("Pogresno uneto vreme sletanja")
    else:
        raise Exception("Pogresno uneto vreme sletanja")
    if isinstance(cena, float) == False or cena < 0:
        raise Exception("Pogresan unos cene!")
    if isinstance(datum_pocetka_operativnosti, datetime.datetime) == False:
        raise Exception("Pogresan datum pocetka operativnosti!")
    if isinstance(datum_kraja_operativnosti, datetime.datetime) == False:
        raise Exception("Pogresan datum kraja operativnosti!")
    if datum_kraja_operativnosti < datum_pocetka_operativnosti:
        raise Exception("Datum kraja operativnosti je pre pocetka!")
    let = {
        "broj_leta": broj_leta,
        "sifra_polazisnog_aerodroma": sifra_polazisnog_aerodroma,
        "sifra_odredisnog_aerodorma": sifra_odredisnog_aerodorma,
        "vreme_poletanja": vreme_poletanja,
        "vreme_sletanja": vreme_sletanja,
        "sletanje_sutra": sletanje_sutra,
        "prevoznik": prevoznik,
        "dani": dani,
        "model": model,
        "cena": cena,
        "datum_pocetka_operativnosti": datum_pocetka_operativnosti,
        "datum_kraja_operativnosti": datum_kraja_operativnosti
    }
    svi_letovi[broj_leta] = let
    return svi_letovi
"""
Funkcija koja cuva sve letove na zadatoj putanji
"""
def sacuvaj_letove(putanja: str, separator: str, svi_letovi: dict):
    with open(putanja, 'a', newline='') as file:
        polja = ("broj_leta", "sifra_polazisnog_aerodroma", "sifra_odredisnog_aerodorma", "vreme_poletanja", "vreme_sletanja", "sletanje_sutra", "prevoznik",
        "dani", "model", "cena", "datum_pocetka_operativnosti", "datum_kraja_operativnosti")
        writer = csv.DictWriter(file, polja, delimiter=separator)
        for let in svi_letovi:
            writer.writerow(svi_letovi[let])
        file.close()

"""
Funkcija koja učitava sve letove iz fajla i vraća ih u rečniku.
"""
def ucitaj_letove_iz_fajla(putanja: str, separator: str) -> dict:
    with open(putanja, 'r', newline='') as file:
        polja = ("broj_leta", "sifra_polazisnog_aerodroma", "sifra_odredisnog_aerodorma", "vreme_poletanja", "vreme_sletanja", "sletanje_sutra", "prevoznik",
        "dani", "model", "cena", "datum_pocetka_operativnosti", "datum_kraja_operativnosti")
        reader = csv.DictReader(file, polja, delimiter=separator)
        svi_letovi = {}
        for row in reader:
            if row["sletanje_sutra"] == "False":
                row["sletanje_sutra"] = False
            else:
                row["sletanje_sutra"] = True
            row["cena"] = float(row["cena"])
            svi_letovi[row["broj_leta"]] = row
        file.close()
        return svi_letovi

def matrica_zauzetosti(konkretan_let: dict):
    pass

def podesi_matricu_zauzetosti(svi_letovi: dict, konkretan_let: dict):
    pass

def checkin(svi_letovi: dict, konkretni_let: dict, red: int, pozicija: int):
    pass